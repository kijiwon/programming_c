1. 자료형 - 변수에 저장할 데이터의 종류와 범위
    •문자형
        char(1byte)-글자 1개(한글은 제외)
        unsigned char(1byte)
    •정수형
        short(2byte)
        ⭐️int(4byte)
        long(4byte)
        long long(8byte)
    •실수형
        ⭐️float(4byte)
        ⭐️double(8byte)
        long double(12~16byte)

2. 변수 - 값이 저장되는 기억 공간
    ◼︎ 변수명 작성 규칙
        •영문자 또는 언더바로 시작(Not 숫자)
        •공백 사용할 수 없음
        •언더바를 제외한 특수문자 사용할 수 없음
        •예약어는 사용할 수 없음
    ◼︎ 변수의 종류
        1) 지역변수 - 함수 내부나 중괄호 내부에서 선언
            유효범위: 함수 내부 또는 중괄호 내부
        2) 전역변수 - 전처리기 아래에 선언
            유효범위: 전 범위. 모든 함수에서 공통으로 사용
        3) 정적변수 - static 키워드로 선언
            유효범위: 선언된 함수 내부
        4) 동적변수 - 프로그램 실행 도중 동적으로 메모리를 할당받음
            malloc 함수 등을 이용해 메모리 공간 확보
        5) 외부변수 - 다른 파일에서 선언된 전역변수를 참조
            extern 키워드를 사용해 외부 파일의 전역변수를 참조

3. 입출력 함수
    •표준 출력 함수
        printf()
        putchar() - 한 개의 문자 출력
        puts() - 문자열 출력
    •표준 입력 함수
        scanf() - 키보드를 통해 한 개 이상의 자료를 입력받음
        getchar() - 한 개의 문자를 입력받음
        gets() - 문자열을 입력받음
    •출력 변환 문자
        %d: 10진수
        %o: 8진수
        %x: 16진수
        %f: 실수
        %c: 문자 1개 printf("%c", 'A');
        %s: 문자열 printf("%s", "ABC")
    •이스케이프 시퀀스
        \n: 다음 줄로 이동
        \t: 수평 탭 간격만큼 이동
        \r: 현재 줄의 맨 앞으로 이동
        \b: 왼쪽으로 한 칸 이동(백스페이스)
        \f: 다음 페이지로 넘김
        \': 작은 따옴표 출력
        \": 큰 따옴표 출력
    ✏️사용 예시
    int main(){
        char c;
        c = getchar(); →입력값 대입 A
        printf("%d\n", c); → c를 10진수로 출력 A를 아스키코드로 변환하면 65
        printf("%c\n", c); → c를 문자로 출력 A
        putchar('A'); → A를 출력 A
        printf("\n"); → 줄바꿈
        putchar(65); → 65를 문자로 변환(아스키코드) A
        return 0;
    }
    [실행 결과]
    65
    A
    A
    A

4. 연산자
    •산술 연산자
        +
        -
        *
        /
        %
        ++
        --
    •관계 연산자
        >
        <
        >=, <=
        ==
        !=
    •논리 연산자
        && - AND
        || - OR
        ! - NOT
    •비트 연산자
        & - 비트 AND
        | - 비트 OR
        ~ - 비트 not: -1한 후 앞에 -부호를 붙임
        ^ - 비트 XOR: 두 자리가 같으면 0, 다르면 1
        << - 좌 비트 이동: 숫자만큼 비트 추가 ex) 10<<2 -> 1010뒤에 00추가 -> 101000 -> 40
        >> - 우 비트 이동: 숫자만큼 비트 제거 ex) 10>>2 -> 1010뒤에 두 비트 제거 -> 10 -> 2
    •삼항 연산자
        ? :
    •대입 연산자
        +=
        -=
        *=
        /=
        %=
    •연산자 우선순위
        ➀단항 연산자: ++, --, !
        ➁산술 연산자: +, -, *, /
        ➂시프트 연산자: <<, >>
        ➃관계 연산자: >, <, >=, <=, ==, !=
        ➄비트 연산자: &, |, ^
        ➅논리 연산자: &&, ||
        ➆삼항 연산자: ? :
        ➇대입 연산자: =, +=, -=, *=,/=, %=

5. 제어문
    ◼︎ if
        •단순 if문
            if(조건){ 조건이 참일 때 실행할 함수 }
        •if else문
            if(조건){ 조건이 참일 때 실행할 함수 } else{ 조건이 거짓일 때 실행할 함수}
        •다중 if문
            if(조건1){
                조건1이 참일 때 실행할 함수
            } else if(조건2){
                조건2가 참일 때 실행할 함수
            } else if(조건3){
                조건3이 참일 때 실행할 함수
            } else{ 
                조건이 모두 거짓일 때 실행할 함수
            }
    ◼︎ switch
        switch(변수){
            case 값1:
                명령문;
                break;
            case 값2:
                명령문;
                break;
            default:
                명령문;
        }
        ❗️ break를 넣어주지 않을 경우 뒤에 오는 모든 함수를 실행
        
6. 반복문
    ◼︎ for 문 - 반복 횟수가 정해진 경우 가장 적합
        for(초기식; 조건식; 증감식){ 반복 실행할 코드 }
        •초기식: 반복 제어 변수의 초기값 설정
        •조건식: 참인 경우 본문 실행, 거짓인 경우 반복문 종료
        •증감식: 반복 제어 변수의 값 변화. ❗️반복이 끝날 때마다 실행
    ◼︎ while 문 - 반복 횟수가 정해지지 않은 경우 적합
        while(조건식){ 반복 실행할 코드 }
        •조건식: 참인 경우 본문 실행, 거짓인 경우 반복문 종료
        •본문: 본문 실행 후 조건식이 다시 평가됨 → 반복 제어 변수의 값을 변화시키는 코드 필요(ex. 증감식)
    ◼︎ do~while문 - 최소 한 번은 본문 실행
        do { 반복 실행할 코드 } while(조건식)
        •본문: 항상 처음 한 번은 실행됨
        •조건식: 본문 실행 후 조건 평가. 참인 경우 본문 실행, 거짓인 경우 반복문 종료
    ◼︎ continue 문 - 반복문의 나머지 코드를 건너뛰고 다음 반복문으로 이동→반복문의 조건 확인 단계로 이동
        for(초기식; 조건식; 증감식){
            if(조건){
                continue; → 조건이 참인 경우 아래 코드를 건너뜀
            }
            조건이 만족되는 경우 실행되지 않음
        }
        • 중첩 반복문에서의 continue
        int main(){
            for(int i = 0; i < 3; i++){
                for(int j = 0; j < 3; j++){
                    if(j == 1){
                        continue;
                    }
                    printf("i: %d, j: %d\n", i, j);
                }
            }
            return 0;
        }

        [실행 결과]
        i: 0, j: 0
        i: 0, j: 2
        i: 1, j: 0
        i: 1, j: 2
        i: 2, j: 0
        i: 2, j: 2
        
    ◼︎ break 문 - 반복문을 즉시 종료시킴
        for(초기식; 조건식; 증감식){
            if(조건){
                break; → 조건이 참인 경우 반복문 종료
            }
            break를 만나지 않은 경우에만 실행
        }
        • 중첩 반복문에서의 break
        int main(){
            for(int i = 0; i < 3; i++){
                for(int j = 0; j < 3; j++){
                    if(j == 1){
                        break;
                    }
                    printf("i: %d, j: %d\n", i, j);
                }
            }
            return 0;
        }

        [실행 결과]
        i: 0, j: 0
        i: 1, j: 0
        i: 2, j: 0

7. 함수
